
import urwid
import pandas as pd

# Load CSV data with pandas
def load_csv_data(filepath):
    return pd.read_csv(filepath)

# Function to search CSV based on SOR ID
def search_sor_id(data, sor_id):
    results = data[data['SOR_ID'].str.contains(sor_id, case=False, na=False)]
    return results

# Function to search entire CSV for any string
def search_any_field(data, search_string):
    mask = pd.DataFrame()
    for column in data.columns:
        mask = mask.append(data[data[column].astype(str).str.contains(search_string, case=False, na=False)])
    return mask.drop_duplicates()

# Save results to a text file
def save_results_to_file(results):
    with open('search_results.txt', 'w') as file:
        file.write(results.to_string(index=False))
    return 'Results saved to search_results.txt'

# Display results or options
def show_results(widget, choice):
    if choice == 'Search by SOR ID':
        main.original_widget = urwid.Filler(urwid.Pile([search_input, search_button, back_button]))
    elif choice == 'General Search':
        main.original_widget = urwid.Filler(urwid.Pile([general_search_input, general_search_button, back_button]))
    elif choice == 'Exit':
        raise urwid.ExitMainLoop()

# Handle specific search
def on_search_button_press(button):
    sor_id = search_input.get_edit_text()
    results = search_sor_id(csv_data, sor_id)
    show_search_results(results)

# Handle general search
def on_general_search_button_press(button):
    search_string = general_search_input.get_edit_text()
    results = search_any_field(csv_data, search_string)
    show_search_results(results)

# Function to handle display of results and options
def show_search_results(results):
    result_text = results.to_string(index=False)
    result_display.set_text(result_text)
    main.original_widget = urwid.Filler(urwid.Pile([result_display, save_button, back_button]))

# Return to main menu
def on_back_button_press(button):
    main.original_widget = urwid.Filler(menu)

# Save results and confirm
def on_save_button_press(button):
    save_message = save_results_to_file(csv_data)
    save_confirm.set_text(save_message)
    main.original_widget = urwid.Filler(urwid.Pile([save_confirm, back_button]))

# Widgets for the UI
menu_choices = ['Search by SOR ID', 'General Search', 'Exit']
menu_items = [urwid.Button(choice) for choice in menu_choices]
for button in menu_items:
    urwid.connect_signal(button, 'click', show_results, button.label)

menu = urwid.ListBox(urwid.SimpleFocusListWalker(menu_items))
search_input = urwid.Edit('Enter SOR ID: ')
general_search_input = urwid.Edit('Enter any string: ')
search_button = urwid.Button('Search SOR ID')
general_search_button = urwid.Button('General Search')
urwid.connect_signal(search_button, 'click', on_search_button_press)
urwid.connect_signal(general_search_button, 'click', on_general_search_button_press)
result_display = urwid.Text('')
save_button = urwid.Button('Save Results')
save_confirm = urwid.Text('')
urwid.connect_signal(save_button, 'click', on_save_button_press)
back_button = urwid.Button('Back')
urwid.connect_signal(back_button, 'click', on_back_button_press)

# Main loop setup
main = urwid.MainLoop(urwid.Filler(menu), unhandled_input=exit_on_q)
def exit_on_q(key):
    if key in ('q', 'Q'):
        raise urwid.ExitMainLoop()

# Load the CSV data
csv_data = load_csv_data('path_to_your_file.csv')  # Replace with your CSV file path

main.run()
